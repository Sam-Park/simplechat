[{"C:\\Users\\Sam\\Desktop\\newnew\\socket-client\\src\\reportWebVitals.js":"1","C:\\Users\\Sam\\Desktop\\newnew\\socket-client\\src\\App.js":"2","C:\\Users\\Sam\\Desktop\\newnew\\socket-client\\src\\index.js":"3","C:\\Users\\Sam\\Desktop\\newnew\\socket-client\\src\\components\\Home.js":"4","C:\\Users\\Sam\\Desktop\\newnew\\socket-client\\src\\components\\ChatRoom.js":"5","C:\\Users\\Sam\\Desktop\\newnew\\socket-client\\src\\components\\useChat.js":"6"},{"size":362,"mtime":1607027564578,"results":"7","hashOfConfig":"8"},{"size":426,"mtime":1607028541479,"results":"9","hashOfConfig":"8"},{"size":500,"mtime":1607027564578,"results":"10","hashOfConfig":"8"},{"size":639,"mtime":1607030135550,"results":"11","hashOfConfig":"8"},{"size":1431,"mtime":1607030126474,"results":"12","hashOfConfig":"8"},{"size":1378,"mtime":1607031077765,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kq2h8f",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},"C:\\Users\\Sam\\Desktop\\newnew\\socket-client\\src\\reportWebVitals.js",[],"C:\\Users\\Sam\\Desktop\\newnew\\socket-client\\src\\App.js",[],"C:\\Users\\Sam\\Desktop\\newnew\\socket-client\\src\\index.js",[],"C:\\Users\\Sam\\Desktop\\newnew\\socket-client\\src\\components\\Home.js",[],"C:\\Users\\Sam\\Desktop\\newnew\\socket-client\\src\\components\\ChatRoom.js",[],"C:\\Users\\Sam\\Desktop\\newnew\\socket-client\\src\\components\\useChat.js",["27"],"import { useEffect, useRef, useState } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\"; // Name of the event\r\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\r\n\r\nconst useChat = (roomId) => {\r\n  const [messages, setMessages] = useState([]); // Sent and received messages\r\n  const socketRef = useRef();\r\n\r\n  useEffect(() => {\r\n    \r\n    // Creates a WebSocket connection\r\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\r\n      query: { roomId },\r\n    });\r\n    \r\n    // Listens for incoming messages\r\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\r\n      const incomingMessage = {\r\n        ...message,\r\n        ownedByCurrentUser: message.senderId === socketRef.current.id,\r\n      };\r\n      setMessages((messages) => [...messages, incomingMessage]);\r\n    });\r\n    \r\n    // Destroys the socket reference\r\n    // when the connection is closed\r\n    return () => {\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, [roomId]);\r\n\r\n  // Sends a message to the server that\r\n  // forwards it to all users in the same room\r\n  const sendMessage = (messageBody) => {\r\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\r\n      body: messageBody,\r\n      senderId: socketRef.current.id,\r\n    });\r\n  };\r\n\r\n  return console.log(messages), { messages, sendMessage };\r\n};\r\n\r\nexport default useChat;",{"ruleId":"28","severity":1,"message":"29","line":43,"column":31,"nodeType":"30","messageId":"31","endLine":43,"endColumn":32},"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression"]